

def read_input():
    return set([int(line) for line in open("input")])

    
def can_be_partitioned(weights):
    s = sum(weights)
    if s % 2 == 1:
        return False
    n = len(weights)
    part = [[True for i in range(n + 1)] for j in range(s / 2 + 1)]
    for i in range(1, s / 2 + 1): 
        part[i][0] = False    
    for i in range(1, s / 2 + 1):   
        for j in range(1, n + 1): 
            part[i][j] = part[i][j - 1]  
            if i >= weights[j - 1]: 
                part[i][j] = (part[i][j] or part[i - weights[j - 1]][j - 1]) 
    return part[s / 2][n]
    
    
def subset(array, num, length):
    result = []
    def find(arr, num, len, path=()):
        if len == 0:
            return
        if not arr:
            return
        if arr[0] == num:
            if len == 1:
                result.append(path + (arr[0],))
            else:
                return
        else:
            find(arr[1:], num - arr[0], len - 1, path + (arr[0],))
            find(arr[1:], num, len, path)
    find(array, num, length)
    return result

    
def solve(weights):
    total_weight = sum(weights)
    length = 1
    found = False
    min_qe = calculate_quantum_entanglement(weights)
    while not found:
        for t in subset(list(weights), total_weight // 3, length):
            if can_be_partitioned(list(weights - set(t))):
                found = True
                qe = calculate_quantum_entanglement(t)
                if qe < min_qe:
                    min_qe = qe
        length += 1
    return min_qe

    
def calculate_quantum_entanglement(config):
    prod = 1
    for p in config:
        prod *= p
    return prod

    
weights = read_input()
res = solve(weights)
print(res)
